
version: "3"
vars:
  OWNER: khulnasoft
  PROJECT: gob

  # static file dirs
  TOOL_DIR: .tool
  TMP_DIR: .tmp


  # tools
  GOLICENSES: "{{ .TOOL_DIR }}/golicenses"
  GOIMPORTS: "{{ .TOOL_DIR }}/gosimports"
  GOLANGCILINT: "{{ .TOOL_DIR }}/golangci-lint"
  BINPACK: "{{ .TOOL_DIR }}/binpack"

  # test details
  # the quality gate lower threshold for unit test total % coverage (by function statements)
  COVERAGE_THRESHOLD: 60


tasks:

  ## High-level tasks #################################

  default:
    desc: Run all validation tasks
    cmds:
      - task: static-analysis
      - task: test

  static-analysis:
    desc: Run all static analysis tasks
    cmds:
      - task: lint
      - task: check-licenses

  test:
    desc: Run all levels of test
    cmds:
      - task: unit

  ## Bootstrap tasks #################################

  binpack:
    internal: true
    # desc: Get the binpack tool
    generates:
      - "{{ .BINPACK }}"
    status:
      - "test -f {{ .BINPACK }}"
    cmd: "curl -sSfL https://raw.githubusercontent.com/khulnasoft/binpack/main/install.sh | sh -s -- -b .tool"
    silent: true

  tools:
    desc: Install all tools needed for CI and local development
    deps: [binpack]
    aliases:
      - bootstrap
    generates:
      - ".binpack.yaml"
      - "{{ .TOOL_DIR }}/*"
    status:
      - "{{ .BINPACK }} check -v"
    cmd: "{{ .BINPACK }} install -v"
    silent: true

  update-tools:
    desc: Update pinned versions of all tools to their latest available versions
    deps: [binpack]
    generates:
      - ".binpack.yaml"
      - "{{ .TOOL_DIR }}/*"
    cmd: "{{ .BINPACK }} update -v"
    silent: true

  list-tools:
    desc: List all tools needed for CI and local development
    deps: [binpack]
    cmd: "{{ .BINPACK }} list"
    silent: true

  list-tool-updates:
    desc: List all tools that are not up to date relative to the binpack config
    deps: [binpack]
    cmd: "{{ .BINPACK }} list --updates"
    silent: true

  tmpdir:
    silent: true
    internal: true
    generates:
      - "{{ .TMP_DIR }}"
    cmd: "mkdir -p {{ .TMP_DIR }}"

  ## Static analysis tasks #################################

  format:
    desc: Auto-format all source code
    deps: [tools]
    cmds:
      - gofmt -w -s .
      - "{{ .GOIMPORTS }} -local github.com/khulnasoft -w ."
      - go mod tidy

  lint-fix:
    desc: Auto-format all source code + run golangci lint fixers
    deps: [tools]
    cmds:
      - task: format
      - "{{ .GOLANGCILINT }} run --tests=false --fix"

  lint:
    desc: Run code format + lint checks
    vars:
      BAD_FMT_FILES:
        sh: gofmt -l -s .
      BAD_FILE_NAMES:
        sh: "find . | grep -e ':' || true"
    deps: [tools]
    cmds:
      # ensure there are no go fmt differences
      - cmd: 'test -z "{{ .BAD_FMT_FILES }}" || (echo "files with gofmt issues: [{{ .BAD_FMT_FILES }}]"; exit 1)'
        silent: true
      # ensure there are no files with ":" in it (a known back case in the go ecosystem)
      - cmd: 'test -z "{{ .BAD_FILE_NAMES }}" || (echo "files with bad names: [{{ .BAD_FILE_NAMES }}]"; exit 1)'
        silent: true
      # run linting
      - "{{ .GOLANGCILINT }} run --tests=false"
      - go mod tidy --diff

  check-licenses:
    # desc: Ensure transitive dependencies are compliant with the current license policy
    deps: [tools]
    cmd: "{{ .GOLICENSES }} check ./..."


  ## Testing tasks #################################

  unit:
    deps: [tmpdir]
    desc: Run unit tests
    # TODO: switch to canopy release invocation
    cmds:
      - "go test -coverprofile {{ .TMP_DIR }}/unit-coverage-details.txt ./..."
      - .github/scripts/coverage.py {{ .COVERAGE_THRESHOLD }} {{ .TMP_DIR }}/unit-coverage-details.txt

